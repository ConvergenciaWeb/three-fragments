title: "FB-2024-TW"
code: 
  head: "#define PI 3.1415926535897932384626433832795\nprecision highp float;\nvarying vec2 vUv;\n"
  dependency: "\nvec4 permute(vec4 x){\n\treturn mod(((x*34.0)+1.0)*x, 289.0);\n\t}//	Classic Perlin 2D Noise \n//	by Stefan Gustavson\n//\nvec2 fade(vec2 t){\n\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nfloat cnoise(vec2 P){\n\tvec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n\tPi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n\tvec4 ix = Pi.xzxz;\n\tvec4 iy = Pi.yyww;\n\tvec4 fx = Pf.xzxz;\n\tvec4 fy = Pf.yyww;\n\tvec4 i = permute(permute(ix) + iy);\n\tvec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n\tvec4 gy = abs(gx) - 0.5;\n\tvec4 tx = floor(gx + 0.5);\n\tgx = gx - tx;\n\tvec2 g00 = vec2(gx.x,gy.x);\n\tvec2 g10 = vec2(gx.y,gy.y);\n\tvec2 g01 = vec2(gx.z,gy.z);\n\tvec2 g11 = vec2(gx.w,gy.w);\n\tvec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n\tg00 *= norm.x;\n\tg01 *= norm.y;\n\tg10 *= norm.z;\n\tg11 *= norm.w;\n\tfloat n00 = dot(g00, vec2(fx.x, fy.x));\n\tfloat n10 = dot(g10, vec2(fx.y, fy.y));\n\tfloat n01 = dot(g01, vec2(fx.z, fy.z));\n\tfloat n11 = dot(g11, vec2(fx.w, fy.w));\n\tvec2 fade_xy = fade(Pf.xy);\n\tvec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n\tfloat n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\treturn 2.3 * n_xy;\n}\n"
  main: "void main() {\n\tfloat strength = cnoise(vUv * 10.0);\n\tgl_FragColor = vec4(strength, strength, strength, 1.0);\n}"
name: "Tidal Waves"
description: "A simple fragment shader that colors the screen based on the UV coordinates."
dependencies: [FB-2024-TW]
author:
  name: "trongar"
  link: "https://trongar.site/"